#!/bin/bash

script_name="$(basename ${BASH_SOURCE[0]})"
script_reldir="$(dirname ${BASH_SOURCE[0]})"
script_absdir="$(cd $script_reldir > /dev/null && pwd)"
. "$script_absdir"/../misc.sh

set -e
trap trap_error ERR
trap trap_exit EXIT
trap trap_user_exit INT


pushd "$script_absdir" >/dev/null

arch="${ARCH:-$(uname -m)}"
container=""
platform=""
prefix="${PREFIX:-gh}"
tag=""
version="${VERSION:-3.11.18}"
volume="${prefix}-rmq"

env_port1=5672
env_port2=15672

# Other RMQ images can be found at https://hub.docker.com/_/rabbitmq
# ATM there's no arm64/v8 version available for the alpine flavor.
if [ "$arch" == "arm64" ]; then
	platform="linux/arm64/v8"
	container="${prefix}-rmq-arm64-$version"
	tag="rabbitmq:$version-management"

elif [ "$arch" == "x86_64" ]; then
	platform="linux/x86_64"
	container="${prefix}-rmq-arm64-$version"
	tag="rabbitmq:$version-alpine-management"

else
	log_error ">>> Unsupported architecture: $arch."
	exit 1
fi

if [ "$1" == "build" ]; then
	docker volume create "$volume"

elif [ "$1" == "reset" ]; then
	docker rm "$container" || true
	docker volume rm "$volume" || true

elif [ "$1" == "rm" ]; then
	docker rm "$container" || true
	docker volume rm "$volume" || true
	docker rmi "$tag" || true

elif [ "$1" == "run" ]; then
	already_ran=$(docker ps -aq --filter name="$container")
	[ -n "$already_ran" ] && docker start "$container"

	[ -z "$already_ran" ] && docker run -d --init \
		-p "$env_port1:$env_port1" \
		-p "$env_port2:$env_port2" \
		--mount source="$volume",target=/usr/local/rabbitmq/var/lib/rabbitmq/mnesia \
		--mount type=tmpfs,destination=/usr/local/rabbitmq/var/log/rabbitmq \
		--name "$container" \
		"$tag"

	docker logs --follow --tail 15 "$container" &
	wait

elif [ "$1" == "stop" ]; then
	[ -n "$(docker ps -q --filter name="$container")" ] &&
		docker stop "$container" &&
		log_info ">>> Stopped $container"

else
	log_warning ">>> Unknown or missing action."
	log_warning "$ ./do build|run|stop|reset|rm"
fi