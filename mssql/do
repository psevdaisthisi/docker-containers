#!/bin/bash

script_name="$(basename ${BASH_SOURCE[0]})"
script_reldir="$(dirname ${BASH_SOURCE[0]})"
script_absdir="$(cd $script_reldir > /dev/null && pwd)"
. "$script_absdir"/../misc.sh

set -e
trap trap_error ERR
trap trap_exit EXIT
trap trap_user_exit INT


pushd "$script_absdir" >/dev/null

# SQL Server images can be found at
# arm64: https://mcr.microsoft.com/v2/azure-sql-edge/tags/list
# x86_64: https://hub.docker.com/_/microsoft-mssql-server
action="$1"
arch="${ARCH:-$(uname -m)}"
container=""
platform=""
prefix="${PREFIX:-gh}"
tag=""
volume="${prefix}-mssql"
env_port=1433
case "$arch" in
arm64)
	platform="linux/arm64/v8"
	version="${VERSION:-1.0.7}"
	container="${prefix}-mssql-arm64-$version"
	tag="mcr.microsoft.com/azure-sql-edge:${version}"
	;;
x86_64)
	platform="linux/x86_64"
	container="${prefix}-mssql-x86_64-$version"
	version="${VERSION:-2019-CU20-ubuntu-20.04}"
	tag="mcr.microsoft.com/mssql/server:$version"
	;;
*)
	log_error ">>> Unsupported architecture: $arch."
	exit 1
	;;
esac

case "$action" in
reset) container_reset "$container" "$volume" ;;
rm) container_rm "$container" "$volume" "$tag" ;;
stop) container_stop "$container" ;;
build) docker volume create "$volume" ;;
start)
	container_id="$(docker ps -aq --filter name="$container")"
	if [ -n "$container_id" ]; then
		docker start "$container"

	else docker run -d --init \
		-p "$env_port:$env_port" \
		-e ACCEPT_EULA=Y \
		-e MSSQL_PID=Developer \
		-e MSSQL_SA_PASSWORD="mssql!42" \
		-e MSSQL_TELEMETRY_ENABLED=FALSE \
		--platform $platform \
		--mount source="$volume",target=/var/opt/mssql \
		--name "$container" \
		"$tag"
	fi

	docker logs --follow --tail 15 "$container" &
	wait
	;;
*)
	log_warning ">>> Unknown or missing action."
	log_warning "$ ./do build|start|stop|reset|rm"
	;;
esac